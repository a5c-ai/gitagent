name: Issue Processor
on:
  issues:
    types: ["opened", "edited", "labeled"]

permissions:
  contents: read
  issues: write

jobs:
  process-issue:
    runs-on: ubuntu-latest
    name: Process Issue with Claude
    if: contains(github.event.issue.labels.*.name, 'bug') || contains(github.event.issue.body, 'bug') || contains(github.event.issue.title, 'bug')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Process Bug Report
        uses: a5c-ai/gitagent@main
        with:
          agent-type: 'claude'
          model: 'claude-3-sonnet-20241022'
          max-tokens: 6000
          temperature: 0.2
          claude-api-key: ${{ secrets.CLAUDE_API_KEY }}
          prompt-template-file: 'prompts/issue-processor.md'

      - name: Post Bug Analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysisPath = '/tmp/bug-analysis.md';
            
            if (fs.existsSync(analysisPath)) {
              const analysis = fs.readFileSync(analysisPath, 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ü§ñ Automated Bug Analysis\n\n${analysis}\n\n---\n*Generated by AI Issue Processor*`
              });
            }

      - name: Apply Recommended Labels
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysisPath = '/tmp/bug-analysis.md';
            
            if (fs.existsSync(analysisPath)) {
              const analysis = fs.readFileSync(analysisPath, 'utf8');
              
              // Extract recommended labels
              const labelMatch = analysis.match(/## Labels Recommendation\s*\n([\s\S]*?)(?=\n##|$)/);
              if (labelMatch) {
                const labelText = labelMatch[1];
                const suggestedLabels = [];
                
                // Parse common labels
                if (labelText.includes('CRITICAL')) suggestedLabels.push('priority: critical');
                if (labelText.includes('HIGH')) suggestedLabels.push('priority: high');
                if (labelText.includes('MEDIUM')) suggestedLabels.push('priority: medium');
                if (labelText.includes('LOW')) suggestedLabels.push('priority: low');
                
                // Add type labels
                if (labelText.includes('frontend')) suggestedLabels.push('area: frontend');
                if (labelText.includes('backend')) suggestedLabels.push('area: backend');
                if (labelText.includes('database')) suggestedLabels.push('area: database');
                if (labelText.includes('api')) suggestedLabels.push('area: api');
                
                // Add status labels
                if (labelText.includes('needs-investigation')) suggestedLabels.push('status: needs-investigation');
                if (labelText.includes('ready-to-fix')) suggestedLabels.push('status: ready-to-fix');
                
                // Apply labels if any were found
                if (suggestedLabels.length > 0) {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    labels: suggestedLabels
                  });
                }
              }
            }

      - name: Create Bug Report File
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const analysisPath = '/tmp/bug-analysis.md';
            
            if (fs.existsSync(analysisPath)) {
              const analysis = fs.readFileSync(analysisPath, 'utf8');
              
              // Create a bug report file in the repository
              const bugFileName = `bug-reports/issue-${{ github.event.issue.number }}.md`;
              const bugContent = "# Bug Report #${{ github.event.issue.number }}\\n\\n" +
                "**Original Issue:** ${{ github.event.issue.html_url }}\\n" +
                "**Created:** ${{ github.event.issue.created_at }}\\n" +
                "**Reporter:** @${{ github.event.issue.user.login }}\\n\\n" +
                "## Original Report\\n" +
                "${{ github.event.issue.body }}\\n\\n" +
                "## AI Analysis\\n" +
                analysis + "\\n\\n" +
                "---\\n" +
                "*This file was automatically generated for tracking purposes.*";
              
              // Write the file using the GitHub API
              const { execSync } = require('child_process');
              
              // Create directory and file
              execSync('mkdir -p bug-reports', { stdio: 'inherit' });
              fs.writeFileSync(bugFileName, bugContent);
              
              // Commit the file
              execSync('git config user.name "Issue Processor"');
              execSync('git config user.email "issue-processor@github-actions"');
              execSync(`git add ${bugFileName}`);
              execSync(`git commit -m "üìù Add bug report analysis for issue #${{ github.event.issue.number }}" || echo "No changes to commit"`);
              execSync('git push || echo "No changes to push"');
            } 