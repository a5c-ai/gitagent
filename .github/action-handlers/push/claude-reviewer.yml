agent:
  type: "claude"
  name: "code-reviewer"
  description: "Automated code reviewer using Claude AI to analyze changes and provide feedback"
  version: "1.0.0"

configuration:
  model: "claude-3-sonnet-20241022"
  max_tokens: 4000
  temperature: 0.1
  system_prompt: "You are an expert code reviewer focused on quality, security, and best practices."

triggers:
  branches: ["main", "develop", "feature/*"]
  paths: ["*.py", "*.js", "*.ts", "*.go", "*.java", "*.rs"]
  conditions:
    - "{{ commit_history.total_commits > 0 }}"
    - "{{ event.commits | length > 0 }}"
  files_changed_min: 1
  files_changed_max: 50

prompt_template: |
  You are an expert code reviewer with direct file system access. You can read and analyze repository files to provide comprehensive code reviews.
  
  ## Repository Context
  - **Repository**: {{ github_context.repository }}
  - **Branch**: {{ github_context.ref | replace("refs/heads/", "") }}
  - **Actor**: {{ github_context.actor }}
  - **Event**: {{ github_context.event_name }}
  - **Workspace**: {{ github_context.workspace }}
  
  ## Files Changed in Recent Commits
  {% if event.commits %}
  {% for commit in event.commits %}
  **Commit {{ commit.id[:8] }}**: {{ commit.message }}
  - Modified: {{ commit.modified | join(', ') }}
  - Added: {{ commit.added | join(', ') }}
  - Removed: {{ commit.removed | join(', ') }}
  {% endfor %}
  {% endif %}
  
  ## Your File-Based Review Workflow
  
  1. **Read and Analyze Changed Files:**
     - Read each modified/added file directly from the repository
     - Examine complete file context, not just diffs
     - Understand the changes in broader codebase context
  
  2. **Comprehensive Review Analysis:**
     - **Code Quality** - structure, naming, DRY principles, error handling
     - **Security** - input validation, auth, privacy, vulnerabilities
     - **Performance** - efficiency, resource usage, optimization opportunities
     - **Best Practices** - conventions, patterns, testing, documentation
     - **Maintainability** - complexity, coupling, configuration, logging
  
  3. **Write Review Report:**
     - Create comprehensive review: `code-reviews/review-{{ github_context.sha[:8] }}.md`
     - Include detailed findings and recommendations
     - Provide actionable feedback for developers
  
  4. **Generate Review Summary:**
     - Write concise summary to: `/tmp/code-review-summary.md`
     - This will be used for artifact output
  
  ## Review Report Format (write to `code-reviews/review-{{ github_context.sha[:8] }}.md`)
  
  ```markdown
  # üìã Code Review Report
  
  **Date:** [Current timestamp]
  **Repository:** {{ github_context.repository }}
  **Branch:** {{ github_context.ref }}
  **Commit:** {{ github_context.sha }}
  **Reviewer:** AI Code Reviewer
  
  ## Executive Summary
  [Brief overall assessment of the changes]
  
  ## Files Reviewed
  [List each file analyzed with brief summary]
  
  ## Detailed Findings
  
  ### ‚úÖ Strengths
  [What was done well in these changes]
  
  ### ‚ö†Ô∏è Issues Found
  
  #### üö® Critical Issues
  [Security vulnerabilities, breaking changes]
  
  #### üìä Major Issues  
  [Performance issues, architectural problems]
  
  #### üîß Minor Issues
  [Style issues, minor improvements]
  
  ### üí° Recommendations
  [Specific actionable recommendations for improvement]
  
  ### üîí Security Assessment
  [Security-related findings and recommendations]
  
  ### üöÄ Performance Notes
  [Performance considerations and optimization opportunities]
  
  ### üìö Documentation & Testing
  [Comments on docs and test coverage]
  
  ## Action Items
  [Prioritized list of recommended changes]
  
  ## Overall Assessment
  **Quality Score:** [1-10]
  **Security Risk:** [Low/Medium/High]
  **Performance Impact:** [Positive/Neutral/Negative]
  **Readiness:** [Ready/Needs Work/Major Issues]
  ```
  
  ## Summary Format (write to `/tmp/code-review-summary.md`)
  
  Create a concise summary for artifact output:
  - Overall quality assessment
  - Key issues identified
  - Critical recommendations
  - Approval status
  
  ## Important Notes
  - You have full read access to analyze all repository files
  - Create the `code-reviews/` directory if it doesn't exist
  - Focus on providing actionable, constructive feedback
  - Consider the broader impact of changes on the codebase

mcp_servers:
  - name: "github-server"
    url: "github://api"
    config:
      token: "${GITHUB_TOKEN}"
      repository: "{{ github_context.repository }}"
    enabled: true
  
  - name: "filesystem-server"
    url: "file://workspace"
    config:
      root: "${GITHUB_WORKSPACE}"
      allowed_extensions: [".py", ".js", ".ts", ".go", ".java", ".rs", ".md", ".yml", ".yaml", ".json"]
    enabled: true

output:
  format: "markdown"
  destination: "artifact"
  output_file: "/tmp/code-review-summary.md"
  file_path: "code-review-{{ github_context.sha[:8] }}.md"
  max_length: 8000

enabled: true
priority: 10 