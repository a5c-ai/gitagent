agent:
  type: "claude"
  name: "ai-bug-fixer"
  description: "AI developer agent that reads bug reports and implements code fixes"
  version: "1.0.0"

configuration:
  model: "claude-3-sonnet-20241022"
  max_tokens: 8000
  temperature: 0.1

triggers:
  branches: ["main", "develop", "feature/*"]
  event_actions: ["opened", "synchronize"]
  
  # File-specific monitoring - only run when bug report markdown files change
  files_changed: ["bug-reports/*.md", "issues/*.md", "reports/*.md"]
  include_file_content: true
  include_file_diff: true
  file_diff_context: 5
  
  conditions:
    - "{{ files_changed | length > 0 }}"
    - "{{ event.action in ['opened', 'synchronize'] or github_context.event_name == 'push' }}"

prompt_template: |
  You are an expert AI software developer with direct file system access. You can read bug reports and implement complete code fixes.
  
  ## Repository Context
  - Repository: {{ github_context.repository }}
  - Branch: {{ github_context.ref }}
  - Event: {{ github_context.event_name }}
  - Commit: {{ github_context.sha }}
  - Workspace: {{ github_context.workspace }}
  
  ## Bug Report Files to Process
  {% for file in files_changed %}
  - **{{ file.filename }}** ({{ file.status }})
  {% endfor %}
  
  ## Your File-Based Development Workflow
  
  1. **Read Bug Reports:**
     {% for file in files_changed %}
     - Read complete bug report from: `{{ file.filename }}`
     {% endfor %}
     
  2. **Analyze Codebase:**
     - Use file access to explore repository structure
     - Read relevant source files to understand implementation
     - Identify root causes and affected components
  
  3. **Implement Fixes:**
     - Modify source files directly to fix reported bugs
     - Follow project coding standards and patterns
     - Add appropriate error handling and validation
     - Write or update tests as needed
  
  4. **Create Implementation Report:**
     - Write detailed implementation report: `bug-fixes/implementation-{{ github_context.sha[:8] }}.md`
     - Include analysis, solution approach, and testing notes
     - Document all code changes made
  
  5. **Generate Summary:**
     - Write concise summary to: `/tmp/bug-fix-summary.md`
     - This will be used for artifact output
  
  ## Implementation Report Format (write to `bug-fixes/implementation-{{ github_context.sha[:8] }}.md`)
  
  ```markdown
  # üêõ Bug Fix Implementation Report
  
  **Date:** [Current timestamp]
  **Repository:** {{ github_context.repository }}
  **Commit:** {{ github_context.sha }}
  **Branch:** {{ github_context.ref }}
  
  ## Bug Reports Processed
  
  [For each bug report file:]
  ### Bug: [Bug title from file]
  **Source:** `[path to .md file]`
  **Status:** FIXED / PARTIAL / FAILED
  
  #### Problem Analysis
  [Detailed analysis of the bug]
  
  #### Solution Approach
  [Explanation of how you fixed it]
  
  #### Code Changes Made
  [List all files modified with brief description]
  - `file1.py` - [What was changed]
  - `file2.test.py` - [Tests added/updated]
  
  #### Implementation Details
  ```language
  // Key code snippets showing the fix
  ```
  
  #### Testing Strategy
  [How to test the fix, what to verify]
  
  #### Breaking Changes
  [Any breaking changes or migration notes]
  
  ---
  
  ## Summary
  - **Total Bugs:** [count]
  - **Bugs Fixed:** [count]
  - **Files Modified:** [count]
  - **Tests Added/Updated:** [count]
  
  ## Next Steps
  [Any follow-up actions needed]
  ```
  
  ## Summary Format (write to `/tmp/bug-fix-summary.md`)
  
  Create a concise summary for artifact output:
  - Bug count and fix status
  - Key files modified
  - Testing recommendations
  - Overall assessment
  
  ## Important Notes
  - You have full read/write access to all repository files
  - Create the `bug-fixes/` directory if it doesn't exist
  - Make actual code changes to implement fixes
  - Provide complete, production-ready implementations

mcp_servers:
  - name: "github-server"
    url: "github://api"
    config:
      token: "${GITHUB_TOKEN}"
    enabled: true

output:
  format: "markdown"
  destination: "artifact"
  output_file: "/tmp/bug-fix-summary.md"
  file_path: "bug-fixes-{{ github_context.sha[:8] }}.md"
  max_length: 25000

# Branch automation to implement the fixes
branch_automation:
  enabled: true
  branch_prefix: "fix/ai-bug"
  commit_message: "ü§ñ AI-implemented fixes for: {{ ', '.join([f.filename.split('/')[-1].replace('.md', '') for f in files_changed]) }}"
  
  create_pull_request: true
  pr_title: "ü§ñ AI Bug Fixes: {{ ', '.join([f.filename.split('/')[-1].replace('.md', '') for f in files_changed]) }}"
  pr_body: |
    ## AI-Implemented Bug Fixes
    
    This PR contains code fixes automatically implemented by AI based on bug reports in commit {{ github_context.sha }}.
    
    ### Bugs Fixed
    {% for file in files_changed %}
    - **{{ file.filename.split('/')[-1].replace('.md', '') }}** from `{{ file.filename }}`
    {% endfor %}
    
    ### What's Included
    - ‚úÖ Complete code fixes for all reported bugs
    - ‚úÖ Updated/new unit tests where applicable
    - ‚úÖ Error handling and edge case coverage
    - ‚úÖ Production-ready, tested implementations
    - ‚úÖ Follows project coding standards
    
    ### AI Analysis
    The AI agent analyzed each bug report, understood the root cause, designed appropriate solutions, and implemented complete fixes with tests.
    
    ### Testing Required
    - [ ] Run full test suite to verify no regressions
    - [ ] Manual testing of fixed functionality
    - [ ] Performance testing if applicable
    - [ ] Security review if changes affect security
    
    ### Review Notes
    While these fixes are AI-generated, please review:
    1. Code quality and adherence to project standards
    2. Test coverage and edge cases
    3. Potential impact on other components
    4. Security implications if any
    
    **Generated by:** {{ agent.name }} v{{ agent.version }}
    **Source:** Bug reports from {{ github_context.event_name }} event
    **Commit:** {{ github_context.sha }}
    
  pr_labels: ["ai-generated", "bug-fix", "automated", "needs-review"]
  pr_assignees: []
  pr_reviewers: []
  target_branch: "main"

enabled: true
priority: 10  # High priority for bug fixes 