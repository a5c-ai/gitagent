agent:
  type: "claude"
  name: "file-inclusion-demo"
  description: "Demonstrates advanced file inclusion capabilities with built-in Claude Code"
  version: "1.0.0"
  executable: "claude"  # Built-in CLI tool - no path required

configuration:
  model: "claude-3-sonnet-20241022"
  max_tokens: 4000
  temperature: 0.1

triggers:
  branches: ["main", "develop"]
  files_changed: ["src/**/*.py", "docs/**/*.md"]
  include_file_content: true
  include_file_diff: true

prompt_template: |
  You are an expert code reviewer with access to the complete codebase. You can read and analyze files directly to provide comprehensive reviews.
  
  ## Project Context
  {{ include("README.md") }}
  {{ include("CONTRIBUTING.md") }}
  
  ## Directory-Specific Guidelines
  {{ include("$ALL_UNIQUE_CHANGED_FILE_DIRS_AND_THEIR_ANCESTORS/.coding-standards.md") }}
  {{ include("$ALL_UNIQUE_CHANGED_FILE_DIRS/**/README.md") }}
  
  ## Configuration Context
  {{ include("$ALL_UNIQUE_CHANGED_FILE_DIRS/**/config.yml") }}
  {{ include("$ALL_UNIQUE_CHANGED_FILE_DIRS/**/.env.example") }}
  
  ## Changed Files Analysis
  {% for file in files_changed %}
  ### {{ file.filename }} ({{ file.status }})
  - Lines added: {{ file.additions }}
  - Lines removed: {{ file.deletions }}
  
  {% if file.content %}
  **Current Content:**
  ```
  {{ file.content }}
  ```
  {% endif %}
  
  {% if file.patch %}
  **Changes:**
  ```diff
  {{ file.patch }}
  ```
  {% endif %}
  {% endfor %}
  
  ## Your Tasks
  1. **Read and analyze** all changed files using direct file access
  2. **Review code quality** following project standards from included guidelines
  3. **Check for** security issues, performance problems, and best practices
  4. **Write comprehensive review** to: `code-reviews/review-{{ github_context.sha[:8] }}.md`
  5. **Provide status summary** to: `/tmp/review-status.md`
  
  Focus on:
  - Code quality and adherence to standards from included guidelines
  - Security vulnerabilities and best practices
  - Performance considerations
  - Documentation and testing completeness
  - Integration with existing codebase patterns

output:
  format: "markdown"
  destination: "status_check"
  output_file: "/tmp/review-status.md"
  status_check_name: "Code Review with File Inclusion"
  status_check_success_on: ["‚úÖ", "LGTM", "approved"]
  status_check_failure_on: ["‚ùå", "issues found", "rejected"]

branch_automation:
  enabled: true
  branch_prefix: "review-fixes"
  commit_message: "ü§ñ Automated fixes from code review"
  create_pull_request: true
  pr_title: "ü§ñ Code Review Fixes - {{ github_context.sha[:8] }}"
  pr_body: |
    ## Automated Code Review Fixes
    
    This PR contains automated fixes identified during code review using the built-in Claude Code.
    
    ### Files Modified
    {% for file in files_changed %}
    - `{{ file.filename }}` ({{ file.status }})
    {% endfor %}
    
    **Review Report**: `code-reviews/review-{{ github_context.sha[:8] }}.md`
    **Commit**: {{ github_context.sha }}
  pr_labels: ["automated", "code-review", "claude-ai"]

enabled: true
priority: 5 